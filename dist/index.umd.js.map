{"version":3,"file":"index.umd.js","sources":["../src/palettes.js","../src/index.js"],"sourcesContent":["\"use strict\";\n\n//TODO: make _init attributes optional\n\nexport default {\n    light: {\n        bg_color: \"#E0E0E0\",\n        bg_border_color: \"#BDBDBD\",\n        track_bg_color: \"#D0D0D0\",\n        track_bg_border_color: \"#FFFFFF\",\n        track_color_init: \"#64B5F6\",\n        track_color: \"#42A5F5\",\n        cursor_color_init: \"#64B5F6\",\n        cursor_color: \"#3CA0F0\",\n        markers_color: \"#AAAAAA\",\n        font_color: \"#424242\"\n    },\n    light2: {\n        bg_color: \"#B1DAEE\",\n        bg_border_color: \"#569DC0\",\n        track_bg_color: \"#B1DAEE\",\n        track_bg_border_color: \"#888\",\n        track_color_init: \"#569DC0\",\n        track_color: \"#1D6D93\",\n        cursor_color_init: \"#569DC0\",\n        cursor_color: \"#1D6D93\",\n        markers_color: \"#3680A4\",\n        font_color: \"#1D6D93\"\n    },\n    dark: {\n        bg: false,\n        track_bg: true,\n        track: true,\n        cursor: true,\n        bg_color: \"#333\",\n        bg_border_color: \"#888\",\n        track_bg_color: \"#555\",\n        track_bg_border_color: \"#373738\",\n        track_color_init: \"#999\",\n        track_color: \"#bbb\",\n        cursor_color_init: \"#999\",\n        cursor_color: \"#d3d347\",\n        markers_color: \"#999\",\n        font_color: \"#FFEA00\"\n    }\n}\n","\nimport palettes from \"./palettes.js\";\n\n// FIXME: remove console usage for IE compatibility\n\n/**\n *\n * @param elem DIV or SVN element\n * @param conf optional config\n * @returns {{value, config}}\n */\nexport default function(elem, conf = {}) {\n\n    if (!elem) {\n        throw \"You must pass a DOM node reference to the slider constructor\";\n    }\n\n    let trace = false;    // when true, will log more details in the console; use enableDebug(), disableDebug() to change\n\n    const NS = \"http://www.w3.org/2000/svg\";\n\n    //---------------------------------------------------------------------\n    /*\n          +--------------+ VIEWBOX_HEIGHT=100\n          |              |\n          |   /------\\   |      ^\n          |   |      |   |      |\n          |   |      |   |      | track_length: 0..(99 - track_offset) [viewbox units]\n          |   |      |   |      |\n          | /----------\\ |      |       ^\n          | |  cursor  | |      |       | cursor_height: 0..(99 - track_offset) [viewbox units]\n          | \\----------/ |      |   ^   v\n          |   |      |   |      |   |\n          |   |  T   |   |      |   |\n          |   |  R   |   |      |   |\n          |   |  A   |   |      |   | position: 0..track_length [viewbox units]\n          |   |  C   |   |      |   |\n          |   |  K   |   |      |   |\n          |   |      |   |      |   |\n          |   \\------/   |  ^   v   -\n          |              |  | track_offset: 0..99 [viewbox units]\n          +--------------+  v\n\n        by default: - track_bg_offset = track_offset\n                    - track_bg_length = track_length\n                    - track_bg_width  = track_width\n\n        position = 0..track_length\n        value = value_min..value_max\n     */\n\n    const VIEWBOX_HEIGHT = 100;\n\n    let svg_element;\n\n    if (typeof elem === \"string\" || elem instanceof String) {\n        elem = document.querySelector(elem);\n    }\n\n    if (elem.nodeName.toLowerCase() === \"svg\") {\n        svg_element = elem;\n    } else {\n        svg_element = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n        elem.appendChild(svg_element);\n    }\n\n    let defaults = {\n        // User configurable properties. The colors are defined in the 'palettes', later on.\n        // No camelCase because we want to be able to have the same name in data- attributes.\n\n        width: 20,\n\n        // background:\n        bg_width: 20,\n        bg_border_width: 1,\n\n        // markers:\n        markers: 4,                  // number of markers; 0 or false to disable\n        markers_length: 18,\n        markers_width: 1,\n\n        // track background:\n        track_bg_offset: 5,\n        track_bg_length: 90,\n        track_bg_width: 8,\n        track_bg_radius: 3,\n        track_bg_border_width: 2,\n\n        // track:\n        track_offset: 5,\n        track_length: 90,\n        track_width: 6,\n        track_radius: 3,\n\n        // cursor\n        cursor_width: 14,\n        cursor_height: 6,\n        cursor_border_width: 0,\n        cursor_radius: 2,\n\n        // value range\n        default_value: 0,\n        initial_value: 0,\n        value_min: 0.0,\n        value_max: 100.0,\n        value_resolution: 1,        // null means ignore\n\n        // appearance:\n        palette: \"light\",\n        bg: false,\n        track_bg: true,\n        track: true,\n        cursor: true,\n        // CSS class names\n        linecap: \"butt\",                    // https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-linecap\n        value_text: true,\n        // value_position: HALF_HEIGHT + 8, // empirical value: HALF_HEIGHT + config.font_size / 3\n        // value_formatting: null,          // TODO; callback function\n        format: v => v,                     // formatting of the displayed value\n\n        font_family: \"sans-serif\",\n        font_size: 25,\n        font_weight: \"bold\",\n\n        class_bg: \"slider-bg\",\n        class_track_bg : \"slider-track-bg\",\n        class_track : \"slider-track\",\n        class_value : \"slider-value\",\n        class_cursor : \"slider-cursor\",\n        class_markers: \"slider-markers\",\n\n        snap_to_steps: false,               // TODO\n\n        // mouse wheel support:\n        mouse_wheel_acceleration: 1,\n\n        // callback function\n        onchange: null                      // provides an alternative to the 'change' event\n    };\n\n    //---------------------------------------------------------------------\n    // Consolidate all configs:\n\n    let data_config = JSON.parse(elem.dataset.config || \"{}\");\n    let c = Object.assign({}, defaults, palettes[defaults.palette], conf, data_config);\n    // we re-assign conf and data_config for the case they override some of the palette colors.\n    let config = Object.assign(c, palettes[c.palette], conf, data_config);\n\n    //---------------------------------------------------------------------\n    // SVG element setup:\n\n    // For the use of null argument with setAttributeNS, see https://developer.mozilla.org/en-US/docs/Web/SVG/Namespaces_Crash_Course#Scripting_in_namespaced_XML\n    svg_element.setAttributeNS(\"http://www.w3.org/2000/xmlns/\", \"xmlns:xlink\", \"http://www.w3.org/1999/xlink\");\n    svg_element.setAttributeNS(null, \"viewBox\", `0 0 ${config.width} ${VIEWBOX_HEIGHT}`);\n\n    //---------------------------------------------------------------------\n    // internals\n\n    let value = 0.0;                   // current slider's value [value_min..value_max]\n    let position = 0;                  // current slider's position [0..track_length]\n    let mouse_wheel_direction = 1;     // dependant of the OS\n\n    //---------------------------------------------------------------------\n    // SVG elements, from back to front:\n    let svg_bg = null;           // background\n    let svg_track_bg = null;     // track background\n    let svg_track = null;\n    let svg_cursor = null;\n    let svg_markers = null;\n    let svg_value_text = null;\n\n    //---------------------------------------------------------------------\n    // mouse support\n    let targetRect;\n    let minDeltaY;\n\n    //---------------------------------------------------------------------\n    // true if the current slider value is different from the default value\n    let has_changed = false;    // to spare some getValue() calls when testing if value has changed from default_value\n\n    //---------------------------------------------------------------------\n    // Create the slider:\n\n    init();\n    draw();\n    attachEventHandlers();\n\n\n    /**\n     * Having a init function allow the slider to be re-configured.\n     */\n    function init() {\n\n        // set initial value and position:\n        setValue(config.initial_value ? config.initial_value : config.default_value);\n\n        // mouse_wheel_direction = _isMacOS() ? -1 : 1; //TODO: really necessary?\n    }\n\n    /**\n     * Return the value \"rounded\" according to config.value_resolution\n     * @param v value\n     */\n    function getRoundedValue(v) {\n        return config.value_resolution === null ? v : Math.round(v / config.value_resolution) * config.value_resolution;\n    }\n\n    /**\n     *\n     * @param position slider's position [0..track_length]\n     * @returns {*}\n     */\n    function getDisplayValue(position) {\n        let v = getValue(position);\n        return config.format(v);\n    }\n\n    /**\n     * Get the slider's value determined by the slider's position (position)\n     * @param a slider's position [0..track_length]\n     * @returns {number}\n     */\n    function getValue(a) {\n        let p = a === undefined ? position : a;\n        let v = (p / config.track_length) * (config.value_max - config.value_min) + config.value_min;\n        return getRoundedValue(v);\n    }\n\n    /**\n     * Set slider's value\n     * @param v\n     */\n    function setValue(v) {\n        if (v < config.value_min) {\n            value = config.value_min;\n        } else if (v > config.value_max) {\n            value = config.value_max;\n        } else {\n            value = v;\n        }\n        setPosition(((v - config.value_min) / (config.value_max - config.value_min)) * config.track_length);\n        return true;\n    }\n\n    /**\n     * Set slider's position\n     * @param new_position\n     * @param fire_event\n     */\n    function setPosition(new_position, fire_event) {\n        let prev = position;\n        let notify = fire_event && (new_position !== position);\n        position = Math.min(Math.max(new_position, 0), config.track_length);\n        if (notify) {\n            // fire the event if the change of position affect the value:\n            if (getValue(prev) !== getValue()) {\n                notifyChange();\n            }\n        }\n    }\n\n    /**\n     * Increment (or decrement if the increment is negative) the slider's position.\n     * @param increment\n     */\n    function incPosition(increment) {\n        // setPosition(Math.min(Math.max(position + increment, 0), config.track_length), true);\n        setPosition(position + increment, true);\n    }\n\n    /**\n     * startDrag() must have been called before to init the targetRect variable.\n     */\n    function mouseUpdate(e) {\n\n        // MouseEvent.clientX (standard property: YES)\n        // The clientX read-only property of the MouseEvent interface provides\n        // the horizontal coordinate within the application's client area at which\n        // the event occurred (as opposed to the coordinates within the page).\n        // For example, clicking in the top-left corner of the client area will always\n        // result in a mouse event with a clientX value of 0, regardless of whether\n        // the page is scrolled horizontally. Originally, this property was defined\n        // as a long integer. The CSSOM View Module redefined it as a double float.\n\n        // let dxPixels = e.clientX - targetRect.left;\n        let dyPixels = e.clientY - targetRect.top;\n\n        // let dx = dxPixels / targetRect.width * config.width;\n        let dy = getViewboxY(dyPixels / targetRect.height * VIEWBOX_HEIGHT + config.track_offset);\n        // position = Math.min(Math.max(dy, 0), config.track_length);\n\n        setPosition(dy, true);\n\n    }\n\n    /**\n     *\n     * @param e\n     */\n    function startDrag(e) {\n\n        if (trace) console.log(\"startDrag\");\n\n        e.preventDefault();\n\n        // API: Event.currentTarget\n        //      Identifies the current target for the event, as the event traverses the DOM. It always REFERS TO THE ELEMENT\n        //      TO WHICH THE EVENT HANDLER HAS BEEN ATTACHED, as opposed to event.target which identifies the element on\n        //      which the event occurred.\n        //      https://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget\n\n        // currentTarget = e.currentTarget;\n\n        // API: Element.getBoundingClientRect() (standard: YES)\n        //      The Element.getBoundingClientRect() method returns the size of an element\n        //      and its POSITION RELATIVE TO THE VIEWPORT.\n        //      The amount of scrolling that has been done of the viewport area (or any other\n        //      scrollable element) is taken into account when computing the bounding rectposition.\n        //      This means that the rectposition's boundary edges (top, left, bottom, and right)\n        //      change their values every time the scrolling position changes (because their\n        //      values are relative to the viewport and not absolute).\n        //      https://developer.mozilla.org/en/docs/Web/API/Element/getBoundingClientRect\n\n        // targetRect = currentTarget.getBoundingClientRect(); // currentTarget must be the <svg...> object\n        targetRect = svg_element.getBoundingClientRect();\n\n        // Note: we must take the boundingClientRect of the <svg> and not the <path> because the <path> bounding rect\n        //       is not constant because it encloses the current arc.\n\n        document.addEventListener(\"mousemove\", handleDrag, false);\n        document.addEventListener(\"mouseup\", endDrag, false);\n\n        mouseUpdate(e);\n        redraw();\n    }\n\n    /**\n     *\n     * @param e\n     */\n    function handleDrag(e) {\n        e.preventDefault();\n        mouseUpdate(e);\n        redraw();\n    }\n\n    /**\n     *\n     */\n    function endDrag() {\n        if (trace) console.log(\"endDrag\");\n        document.removeEventListener(\"mousemove\", handleDrag, false);\n        document.removeEventListener(\"mouseup\", endDrag, false);\n    }\n\n    /**\n     *\n     * @param e\n     * @returns {boolean}\n     */\n    function mouseWheelHandler(e) {\n\n        // WheelEvent\n        // This is the standard wheel event interface to use. Old versions of browsers implemented the two non-standard\n        // and non-cross-browser-compatible MouseWheelEvent and MouseScrollEvent interfaces. Use this interface and avoid\n        // the latter two.\n        // The WheelEvent interface represents events that occur due to the user moving a mouse wheel or similar input device.\n\n        // https://stackoverflow.com/questions/5527601/normalizing-mousewheel-speed-across-browsers\n        // https://github.com/facebook/fixed-data-table/blob/master/src/vendor_upstream/dom/normalizeWheel.js\n\n        e.preventDefault();\n\n        let dy = e.deltaY;\n\n        if (dy !== 0) {\n            // normalize Y delta\n            if (minDeltaY > Math.abs(dy) || !minDeltaY) {\n                minDeltaY = Math.abs(dy);\n            }\n        }\n\n        incPosition(dy / minDeltaY * mouse_wheel_direction * config.mouse_wheel_acceleration);\n\n        // TODO: mouse speed detection (https://stackoverflow.com/questions/22593286/detect-measure-scroll-speed)\n\n        redraw();\n\n        return false;\n    }\n\n    /**\n     *\n     * @param e\n     */\n    function startTouch(e) {\n\n        if (trace) console.log(\"startTouch\");\n\n        e.preventDefault(); // necessary to avoid moving all the page\n\n        targetRect = svg_element.getBoundingClientRect();\n\n        document.addEventListener(\"touchmove\", handleTouch, {passive: false});\n        document.addEventListener(\"touchend\", endTouch);\n\n    }\n\n    /**\n     *\n     * @param e\n     */\n    function handleTouch(e) {\n\n        if (trace) console.log(\"handleTouch\", e.touches);\n\n        e.preventDefault();\n\n        let touchesIndex = e.touches.length - 1;\n\n        let dyPixels = e.touches[touchesIndex].clientY - targetRect.top;\n\n        // let dx = dxPixels / targetRect.width * config.width;\n        let dy = getViewboxY(dyPixels / targetRect.height * VIEWBOX_HEIGHT + config.track_offset);\n        // position = Math.min(Math.max(dy, 0), config.track_length);\n\n        setPosition(dy, true);\n        redraw();\n    }\n\n    /**\n     *\n     */\n    function endTouch() {\n        if (trace) console.log(\"endTouch\");\n        document.removeEventListener(\"touchmove\", handleTouch);\n        document.removeEventListener(\"touchend\", endTouch);\n    }\n\n    /**\n     *\n     */\n    function attachEventHandlers() {\n        svg_element.addEventListener(\"mousedown\", function(e) {\n            startDrag(e);\n        });\n        svg_element.addEventListener(\"wheel\", function(e) {\n            mouseWheelHandler(e);\n        });\n        svg_element.addEventListener(\"touchstart\", startTouch, {passive: false});\n    }\n\n    /**\n     *\n     */\n    function notifyChange() {\n        if (trace) console.log(\"slider value has changed\");\n        let value = getValue();     // TODO: cache the value\n        let event = new CustomEvent(\"change\", {\"detail\": value});\n        elem.dispatchEvent(event);\n        if (config.onchange) {\n            config.onchange(value);\n        }\n    }\n\n    /**\n     * Utility function to configure the mousewheel direction.\n     * @returns {*}\n     * @private\n     */\n    function _isMacOS() {\n        return [\"Macintosh\", \"MacIntel\", \"MacPPC\", \"Mac68K\"].indexOf(window.navigator.platform) !== -1;\n    }\n\n    /**\n     * Return viewBox Y coordinate\n     */\n    function getViewboxY(y) {\n        return Math.min(Math.max(VIEWBOX_HEIGHT - y, 0), VIEWBOX_HEIGHT);\n    }\n\n    /**\n     *\n     */\n    function draw_background() {\n\n        if (!config.bg) return;\n\n        // For the use of null argument with setAttributeNS, see https://developer.mozilla.org/en-US/docs/Web/SVG/Namespaces_Crash_Course#Scripting_in_namespaced_XML\n\n        svg_bg = document.createElementNS(NS, \"rect\");\n        svg_bg.setAttributeNS(null, \"x\", \"0\");\n        svg_bg.setAttributeNS(null, \"y\", \"0\");\n        svg_bg.setAttributeNS(null, \"width\", `${config.width}`);\n        svg_bg.setAttributeNS(null, \"height\", `${VIEWBOX_HEIGHT}`);\n        svg_bg.setAttributeNS(null, \"rx\", \"0\");     // Determines the horizontal corner radius of the rect.\n        svg_bg.setAttributeNS(null, \"ry\", \"0\");     // Determines the vertical corner radius of the rect.\n        svg_bg.setAttribute(\"fill\", `${config.bg_color}`);\n        svg_bg.setAttribute(\"stroke\", `${config.bg_border_color}`);\n        svg_bg.setAttribute(\"stroke-width\", `${config.bg_border_width}`);\n        svg_bg.setAttribute(\"class\", config.class_bg);\n        svg_element.appendChild(svg_bg);\n    }\n\n    /**\n     *\n     */\n    function draw_markers() {\n\n        if (!config.markers) return;\n\n        let x0 = (config.width - config.markers_length) / 2;\n        let x1 = x0 + config.markers_length;\n\n        let p = \"\";\n        let k = config.markers;\n        for (let i = 0; i <= k; i++) {\n            let y = getViewboxY(config.track_offset + (config.track_length / k * i));\n            if (trace) console.log(`M ${x0},${y} L ${x1},${y} `);\n            p += `M ${x0},${y} L ${x1},${y} `;\n        }\n\n        svg_markers = document.createElementNS(NS, \"path\");\n        svg_markers.setAttributeNS(null, \"d\", p);\n        svg_markers.setAttribute(\"stroke\", `${config.markers_color}`);\n        svg_markers.setAttribute(\"stroke-width\", `${config.markers_width}`);\n        svg_markers.setAttribute(\"stroke-linecap\", config.linecap);\n        svg_markers.setAttribute(\"class\", config.class_markers);\n        svg_element.appendChild(svg_markers);\n    }\n\n    /**\n     *\n     */\n    function draw_track_background() {\n\n        // For the use of null argument with setAttributeNS, see https://developer.mozilla.org/en-US/docs/Web/SVG/Namespaces_Crash_Course#Scripting_in_namespaced_XML\n\n        if (!config.track_bg) return;\n\n        svg_track_bg = document.createElementNS(NS, \"rect\");\n        svg_track_bg.setAttributeNS(null, \"x\", `${(config.width - config.track_bg_width) / 2}`);\n        svg_track_bg.setAttributeNS(null, \"y\", `${getViewboxY(config.track_bg_offset + config.track_bg_length + config.track_bg_radius)}`);\n        svg_track_bg.setAttributeNS(null, \"width\", `${config.track_bg_width}`);\n        svg_track_bg.setAttributeNS(null, \"height\", `${config.track_bg_length + (2 * config.track_bg_radius)}`);\n        svg_track_bg.setAttributeNS(null, \"rx\", `${config.track_bg_radius}`);\n        svg_track_bg.setAttributeNS(null, \"ry\", `${config.track_bg_radius}`);\n        svg_track_bg.setAttribute(\"stroke\", `${config.track_bg_border_color}`);\n        svg_track_bg.setAttribute(\"stroke-width\", `${config.track_bg_border_width}`);\n        svg_track_bg.setAttribute(\"fill\", `${config.track_bg_color}`);\n        svg_track_bg.setAttribute(\"class\", config.class_track_bg);\n        svg_element.appendChild(svg_track_bg);\n    }\n\n    /**\n     *\n     */\n    function draw_track() {\n        if (!config.track) return;\n\n        if (!svg_track) {\n            svg_track = document.createElementNS(NS, \"rect\");\n            svg_track.setAttributeNS(null, \"x\", `${(config.width - config.track_width) / 2}`);\n            svg_track.setAttributeNS(null, \"width\", `${config.track_width}`);\n            svg_track.setAttributeNS(null, \"rx\", `${config.track_radius}`);\n            svg_track.setAttributeNS(null, \"ry\", `${config.track_radius}`);\n            // svg_track.setAttribute(\"stroke\", `${config.track_color_init}`);\n            svg_track.setAttribute(\"stroke-width\", \"0\");\n            svg_track.setAttribute(\"fill\", `${config.track_color}`);\n            // svg_track.setAttribute(\"stroke-linecap\", config.linecap);\n            svg_track.setAttribute(\"class\", config.class_track);\n            svg_element.appendChild(svg_track);\n        }\n        svg_track.setAttributeNS(null, \"y\", `${getViewboxY(config.track_offset + position + config.track_radius)}`);\n        svg_track.setAttributeNS(null, \"height\", `${position + (2 *  + config.track_radius)}`);\n    }\n\n    /**\n     *\n     */\n    function draw_cursor() {\n\n        if (!config.cursor) return;\n\n        if (!svg_cursor) {\n            svg_cursor = document.createElementNS(NS, \"rect\");\n            svg_cursor.setAttributeNS(null, \"x\", `${(config.width - config.cursor_width) / 2}`);\n            svg_cursor.setAttributeNS(null, \"width\", `${config.cursor_width}`);\n            svg_cursor.setAttributeNS(null, \"height\", `${config.cursor_height}`);\n            svg_cursor.setAttributeNS(null, \"rx\", `${config.cursor_radius}`);     // Determines the horizontal corner radius of the rect.\n            svg_cursor.setAttributeNS(null, \"ry\", `${config.cursor_radius}`);     // Determines the vertical corner radius of the rect.\n            // svg_cursor.setAttribute(\"stroke\", `${config.track_bg_color}`);\n            svg_cursor.setAttribute(\"stroke-width\", \"0\");\n            svg_cursor.setAttribute(\"fill\", `${config.cursor_color}`);\n            // svg_cursor.setAttribute(\"stroke-linecap\", config.linecap);\n            svg_cursor.setAttribute(\"class\", config.class_cursor);\n            svg_element.appendChild(svg_cursor);\n        }\n        svg_cursor.setAttributeNS(null, \"y\", `${getViewboxY(config.track_offset + config.cursor_height / 2 + position)}`);\n    }\n\n    /**\n     *\n     */\n    function draw_value() {\n\n        if (!config.value_text) return;\n\n/*\n        svg_value_text = document.createElementNS(NS, \"text\");\n        svg_value_text.setAttributeNS(null, \"x\", `${HALF_WIDTH}`);\n        svg_value_text.setAttributeNS(null, \"y\", `${config.value_position}`);\n        svg_value_text.setAttribute(\"text-anchor\", \"middle\");\n        svg_value_text.setAttribute(\"cursor\", \"default\");\n        svg_value_text.setAttribute(\"font-family\", config.font_family);\n        svg_value_text.setAttribute(\"font-size\", `${config.font_size}`);\n        svg_value_text.setAttribute(\"font-weight\", `${config.font_weight}`);\n        svg_value_text.setAttribute(\"fill\", config.font_color);\n        svg_value_text.setAttribute(\"class\", config.class_value);\n        svg_value_text.textContent = getDisplayValue();\n        svg_element.appendChild(svg_value_text);\n*/\n    }\n\n    /**\n     *\n     */\n    function draw() {\n        draw_background();\n        draw_markers();\n        draw_track_background();\n        // draw_units();\n        draw_track();\n        draw_cursor();\n        draw_value();\n    }\n\n    /**\n     *\n     */\n    function redraw() {\n\n        if (trace) console.log(\"redraw\");\n\n        draw_track();\n        draw_cursor();\n\n        if (!has_changed) {\n            has_changed = getValue() !== config.default_value;\n            // if (has_changed) {\n            //     if (svg_track) svg_track.setAttribute(\"stroke\", `${config.track_color}`);\n            // }\n        }\n\n        if (svg_value_text) {\n            svg_value_text.textContent = getDisplayValue();\n        }\n    }\n\n    /**\n     *\n     */\n    return {\n        set value(v) {\n            setValue(v);\n            redraw();\n        },\n        set config(new_config) {\n            config = Object.assign({}, defaults, conf, new_config);\n            init();\n            draw();\n        },\n        enableDebug: function() {\n            trace = true;\n            console.log(\"debug enabled\");\n        },\n        disableDebug: function() {\n            trace = false;\n        }\n    };\n\n}\n"],"names":["light","bg_color","bg_border_color","track_bg_color","track_bg_border_color","track_color_init","track_color","cursor_color_init","cursor_color","markers_color","font_color","light2","dark","bg","track_bg","track","cursor","elem","conf","svg_element","trace","NS","VIEWBOX_HEIGHT","String","document","querySelector","nodeName","toLowerCase","createElementNS","appendChild","defaults","width","bg_width","bg_border_width","markers","markers_length","markers_width","track_bg_offset","track_bg_length","track_bg_width","track_bg_radius","track_bg_border_width","track_offset","track_length","track_width","track_radius","cursor_width","cursor_height","cursor_border_width","cursor_radius","default_value","initial_value","value_min","value_max","value_resolution","palette","linecap","value_text","format","v","font_family","font_size","font_weight","class_bg","class_track_bg","class_track","class_value","class_cursor","class_markers","snap_to_steps","mouse_wheel_acceleration","onchange","data_config","JSON","parse","dataset","config","c","Object","assign","palettes","setAttributeNS","targetRect","minDeltaY","position","svg_bg","svg_track_bg","svg_track","svg_cursor","svg_markers","init","setValue","getValue","a","Math","round","getRoundedValue","undefined","setPosition","new_position","fire_event","prev","notify","min","max","console","log","value","event","CustomEvent","dispatchEvent","notifyChange","mouseUpdate","e","getViewboxY","clientY","top","height","handleDrag","preventDefault","redraw","endDrag","removeEventListener","handleTouch","touches","length","endTouch","y","draw_track","setAttribute","draw_cursor","draw","x0","x1","p","k","i","draw_markers","addEventListener","getBoundingClientRect","startDrag","dy","deltaY","abs","mouseWheelHandler","passive","new_config","enableDebug","disableDebug"],"mappings":"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"}